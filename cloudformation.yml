### REQUIRES UPDATES:
### Domain information in routing configs (Domain Name, Hosted Zone ID)

### NOTES:
### Deployment will halt on Certificate creation until the cert is validated
### https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html
### "You cannot programmatically request that ACM automatically create your record in Route 53"
AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  GitHubPersonalAccessToken:
    Type: String
    Description: GitHub Personal Access Token
  BTMerchantIDTest:
    Type: String
    Description: TEST - Braintree Merchant ID
  BTPublicKeyTest:
    Type: String
    Description: TEST - Braintree Public Key
  BTPrivateKeyTest:
    Type: String
    Description: TEST - Braintree PrivateKey
  BTMerchantIDProd:
    Type: String
    Description: PROD - Braintree Merchant ID
  BTPublicKeyProd:
    Type: String
    Description: PROD - Braintree Public Key
  BTPrivateKeyProd:
    Type: String
    Description: PROD - Braintree PrivateKey
  StripeSKTest:
    Type: String
    Description: TEST - Stripe Secret Key
  StripeSKProd:
    Type: String
    Description: PROD - Stripe Secret Key
Resources:
  GitHubSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: GitHubPersonalAccessToken
      Description: Personal Access token for GitHub
      SecretString:
        Ref: GitHubPersonalAccessToken
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodePipelineTheatreThrivesRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodePipelineTheatreThrivesPolicy
      Roles:
        - Ref: "PipelineRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html
  S3BucketTest:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: community-theatre-thrives
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - http://theatrethrives-s3buckettest-1h5ug55ioxofy.s3-website-us-east-1.amazonaws.com/
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        # RoutingRules:
        #   - RedirectRule:
        #       ReplaceKeyWith: donate.html
        #     RoutingRuleCondition:
        #       KeyPrefixEquals: donate
        # - RedirectRule:
        #     ReplaceKeyWith: donate
        #   RoutingRuleCondition:
        #     KeyPrefixEquals: donate.html
    DeletionPolicy: Retain
  BucketPolicyTest:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: TheatreThrivesBucketPolicyTest
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3BucketTest
                - /*
      Bucket: !Ref S3BucketTest
  S3BucketProd:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: community-theatre-thrives
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
  BucketPolicyProd:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: TheatreThrivesBucketPolicyProd
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3BucketProd
                - /*
      Bucket: !Ref S3BucketProd
  PipelineS3Bucket:
    Type: AWS::S3::Bucket
    # Properties:
    # BucketName: communitytheatrethrives-codepipeline
    DeletionPolicy: Retain
  CodePipelineTest:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: theatrethrives-deploy-test
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineS3Bucket
      Stages:
        # https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-GitHub.html
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Branch: master
                OAuthToken:
                  !Join [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      !Ref GitHubSecret,
                      ":SecretString}}",
                    ],
                  ]
                Owner: sethsacher
                PollForSourceChanges: "false"
                Repo: theatrethrives
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: []
              Region: us-east-1
              Namespace: SourceVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              RunOrder: 1
              Configuration:
                BucketName: !Ref S3BucketTest
                Extract: "true"
              OutputArtifacts: []
              InputArtifacts:
                - Name: SourceArtifact
              Region: us-east-1
              Namespace: DeployVariables
  CodePipelineProd:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: theatrethrives-deploy-prod
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineS3Bucket
      Stages:
        # https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-GitHub.html
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Branch: master
                OAuthToken:
                  !Join [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      !Ref GitHubSecret,
                      ":SecretString}}",
                    ],
                  ]
                Owner: sethsacher
                PollForSourceChanges: "false"
                Repo: theatrethrives
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: []
              Region: us-east-1
              Namespace: SourceVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              RunOrder: 1
              Configuration:
                BucketName: !Ref S3BucketProd
                Extract: "true"
              OutputArtifacts: []
              InputArtifacts:
                - Name: SourceArtifact
              Region: us-east-1
              Namespace: DeployVariables
  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: TheatreThrivesCodePipelineWebhook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken:
          !Join [
            "",
            ["{{resolve:secretsmanager:", !Ref GitHubSecret, ":SecretString}}"],
          ]
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipelineTest
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipelineTest.Version
      RegisterWithThirdParty: true
  # 20200618 - We need CloudFront for HTTPS
  CloudFrontDistributionProd:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt S3BucketProd.DomainName
            Id: theatrethrives-s3-prod
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              # OriginProtocolPolicy: match-viewer
        Aliases:
          - "theatrethrives.org"
          - "*.theatrethrives.org"
        Enabled: "true"
        Comment: Prod CDN for Community Theatre Thrives website
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: "false"
          Bucket: !GetAtt PipelineS3Bucket.DomainName
          Prefix: ctt
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: theatrethrives-s3-prod
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          # ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateProd
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
  Route53Prod:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z03958111PUAAWEYUBR50
      RecordSets:
        - Name: "theatrethrives.org"
          Type: A
          AliasTarget:
            # Intentionally hard-coded, specific AWS thing
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistributionProd.DomainName
        - Name: "*.theatrethrives.org"
          Type: A
          AliasTarget:
            # Intentionally hard-coded, specific AWS thing
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistributionProd.DomainName
  S3BucketSite2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: theaterthrives.com
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  S3BucketSite2B:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: www.theaterthrives.com
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  Route53Prod2:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z08348143PFBZN2HSBGH5
      RecordSets:
        - Name: "theaterthrives.com"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
        - Name: "*.theaterthrives.com"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
  # CertificateSite2:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: "www.theaterthrives.com"
  #     ValidationMethod: DNS
  #     SubjectAlternativeNames:
  #       - "*.theaterthrives.com"
  #       - "theaterthrives.com"
  S3BucketSite3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: theaterthrives.org
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  S3BucketSite3B:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: www.theaterthrives.org
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  Route53Prod3:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z083750234WWLB9BAPQ4Y
      RecordSets:
        - Name: "theaterthrives.org"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
        - Name: "*.theaterthrives.org"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
  S3BucketSite4:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: theatrethrives.com
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  S3BucketSite4B:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: www.theatrethrives.com
      AccessControl: BucketOwnerFullControl
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: theatrethrives.org
  Route53Prod4:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z094723225SKKESU1JBIL
      RecordSets:
        - Name: "theatrethrives.com"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
        - Name: "*.theatrethrives.com"
          Type: A
          AliasTarget:
            HostedZoneId: Z3AQBSTGFYJSTF
            DNSName: s3-website-us-east-1.amazonaws.com
  CertificateProd:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "www.theatrethrives.org"
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - "*.theatrethrives.org"
        - "theatrethrives.org"
  LambdaApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Test
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
  LambdaDonate:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: Donate-Test
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri:
        Bucket: !Ref S3BucketTest
        Key: lambda-functions.zip
      Description: ""
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BT_MERCHANT_ID: !Ref BTMerchantIDTest
          BT_PUBLIC_KEY: !Ref BTPublicKeyTest
          BT_PRIVATE_KEY: !Ref BTPrivateKeyTest
          STRIPE_SK: !Ref StripeSKTest
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /donate
            Method: ANY
            RestApiId: !Ref LambdaApi
  LambdaApiProd:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
  LambdaDonateProd:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: Donate-Prod
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri:
        Bucket: !Ref S3BucketProd
        Key: lambda-functions.zip
      Description: ""
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BT_MERCHANT_ID: !Ref BTMerchantIDProd
          BT_PUBLIC_KEY: !Ref BTPublicKeyProd
          BT_PRIVATE_KEY: !Ref BTPrivateKeyProd
          STRIPE_SK: !Ref StripeSKProd
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /donate
            Method: ANY
            RestApiId: !Ref LambdaApiProd
Outputs:
  WebsiteURLTest:
    Value: !GetAtt
      - S3BucketTest
      - WebsiteURL
    Description: TEST URL for website hosted on S3
  WebsiteURLProd:
    Value: !GetAtt
      - S3BucketProd
      - WebsiteURL
    Description: PROD URL for website hosted on S3
  CloudFrontWebsiteURLProd:
    Value: !GetAtt CloudFrontDistributionProd.DomainName
    Description: PROD URL for CloudFront
