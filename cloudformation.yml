AWSTemplateFormatVersion: 2010-09-09
Transform: "AWS::Serverless-2016-10-31"
Parameters:
  GitHubPersonalAccessToken:
    Type: String
    Description: GitHub Personal Access Token
Resources:
  GitHubSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: GitHubPersonalAccessToken
      Description: Personal Access token for GitHub
      SecretString:
        Ref: GitHubPersonalAccessToken
  PipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodePipelineTheatreThrivesRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodePipelineTheatreThrivesPolicy
      Roles:
        - Ref: "PipelineRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
                  - elasticbeanstalk.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
          - Action:
              - codecommit:CancelUploadArchive
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:GetUploadArchiveStatus
              - codecommit:UploadArchive
            Resource: "*"
            Effect: Allow
          - Action:
              - codedeploy:CreateDeployment
              - codedeploy:GetApplication
              - codedeploy:GetApplicationRevision
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:RegisterApplicationRevision
            Resource: "*"
            Effect: Allow
          - Action:
              - codestar-connections:UseConnection
            Resource: "*"
            Effect: Allow
          - Action:
              - elasticbeanstalk:*
              - ec2:*
              - elasticloadbalancing:*
              - autoscaling:*
              - cloudwatch:*
              - s3:*
              - sns:*
              - cloudformation:*
              - rds:*
              - sqs:*
              - ecs:*
            Resource: "*"
            Effect: Allow
          - Action:
              - lambda:InvokeFunction
              - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          - Action:
              - opsworks:CreateDeployment
              - opsworks:DescribeApps
              - opsworks:DescribeCommands
              - opsworks:DescribeDeployments
              - opsworks:DescribeInstances
              - opsworks:DescribeStacks
              - opsworks:UpdateApp
              - opsworks:UpdateStack
            Resource: "*"
            Effect: Allow
          - Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
            Resource: "*"
            Effect: Allow
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
            Resource: "*"
            Effect: Allow
          - Effect: Allow
            Action:
              - devicefarm:ListProjects
              - devicefarm:ListDevicePools
              - devicefarm:GetRun
              - devicefarm:GetUpload
              - devicefarm:CreateUpload
              - devicefarm:ScheduleRun
            Resource: "*"
          - Effect: Allow
            Action:
              - servicecatalog:ListProvisioningArtifacts
              - servicecatalog:CreateProvisioningArtifact
              - servicecatalog:DescribeProvisioningArtifact
              - servicecatalog:DeleteProvisioningArtifact
              - servicecatalog:UpdateProduct
            Resource: "*"
          - Effect: Allow
            Action:
              - cloudformation:ValidateTemplate
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:DescribeImages
            Resource: "*"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-s3.html
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # BucketName: community-theatre-thrives
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: TheatreThrivesBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket
  PipelineS3Bucket:
    Type: AWS::S3::Bucket
    # Properties:
    # BucketName: communitytheatrethrives-codepipeline
    DeletionPolicy: Retain
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: theatrethrives-deploy
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineS3Bucket
      Stages:
        # https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-GitHub.html
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              RunOrder: 1
              Configuration:
                Branch: cloud-formation
                OAuthToken:
                  !Join [
                    "",
                    [
                      "{{resolve:secretsmanager:",
                      !Ref GitHubSecret,
                      ":SecretString}}",
                    ],
                  ]
                Owner: sethsacher
                PollForSourceChanges: "false"
                Repo: theatrethrives
              OutputArtifacts:
                - Name: SourceArtifact
              InputArtifacts: []
              Region: us-east-1
              Namespace: SourceVariables
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: "1"
              RunOrder: 1
              Configuration:
                BucketName: !Ref S3Bucket
                Extract: "true"
              OutputArtifacts: []
              InputArtifacts:
                - Name: SourceArtifact
              Region: us-east-1
              Namespace: DeployVariables
  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: TheatreThrivesCodePipelineWebhook
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken:
          !Join [
            "",
            ["{{resolve:secretsmanager:", !Ref GitHubSecret, ":SecretString}}"],
          ]
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version
      RegisterWithThirdParty: true
  # LambdaDonate:
  #   Type: "AWS::Serverless::Function"
  #   Properties:
  #     FunctionName: Donate
  #     Handler: index.handler
  #     Runtime: nodejs12.x
  #     CodeUri:
  #       Bucket: !Ref S3Bucket
  #       Key: lambda-functions.zip
  #     Description: ""
  #     MemorySize: 128
  #     Timeout: 3
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Events:
  #       Api1:
  #         Type: Api
  #         Properties:
  #           Path: "/{city}"
  #           Method: ANY
  #       Api2:
  #         Type: Api
  #         Properties:
  #           Path: /donate
  #           Method: ANY
  #       Api3:
  #         Type: Api
  #         Properties:
  #           Path: /Donate
  #           Method: ANY
Outputs:
  WebsiteURL:
    Value: !GetAtt
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - S3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content
